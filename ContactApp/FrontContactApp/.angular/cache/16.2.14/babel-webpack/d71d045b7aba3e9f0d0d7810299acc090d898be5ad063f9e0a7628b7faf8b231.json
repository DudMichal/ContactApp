{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../contact.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction ContactDetailComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵproperty(\"value\", i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(category_r1);\n  }\n}\nexport class ContactDetailComponent {\n  constructor(route, contactService, router) {\n    this.route = route;\n    this.contactService = contactService;\n    this.router = router;\n    this.contact = {};\n    this.contactCategories = ['Business', 'Personal', 'Other'];\n  }\n  ngOnInit() {\n    const idParam = this.route.snapshot.paramMap.get('id');\n    if (idParam !== null) {\n      const id = +idParam;\n      this.contactService.getContact(id).subscribe(data => {\n        data.birthDate = data.birthDate.split('T')[0];\n        this.contact = data;\n      }, error => console.error('Failed to fetch contact details', error));\n    } else {\n      console.error('ID parameter is null');\n    }\n  }\n  save() {\n    this.contactService.updateContact(this.contact.id, this.contact).subscribe(() => this.router.navigate(['/contacts']), error => console.error('Failed to update contact', error));\n  }\n  static #_ = this.ɵfac = function ContactDetailComponent_Factory(t) {\n    return new (t || ContactDetailComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ContactService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ContactDetailComponent,\n    selectors: [[\"app-contact-detail\"]],\n    decls: 36,\n    vars: 9,\n    consts: [[3, \"ngSubmit\"], [\"name\", \"firstName\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"lastName\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"email\", \"type\", \"email\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"password\", \"type\", \"password\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"category\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"name\", \"subcategory\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"phone\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"birthDate\", \"type\", \"date\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [3, \"value\"]],\n    template: function ContactDetailComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ContactDetailComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵelementStart(1, \"div\")(2, \"label\");\n        i0.ɵɵtext(3, \"First Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_4_listener($event) {\n          return ctx.contact.firstName = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\")(6, \"label\");\n        i0.ɵɵtext(7, \"Last Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.contact.lastName = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n        i0.ɵɵtext(11, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.contact.email = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\")(14, \"label\");\n        i0.ɵɵtext(15, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.contact.password = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\")(18, \"label\");\n        i0.ɵɵtext(19, \"Category:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"select\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_select_ngModelChange_20_listener($event) {\n          return ctx.contact.category = $event;\n        });\n        i0.ɵɵtemplate(21, ContactDetailComponent_option_21_Template, 2, 2, \"option\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\")(23, \"label\");\n        i0.ɵɵtext(24, \"Subcategory:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_25_listener($event) {\n          return ctx.contact.subcategory = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\")(27, \"label\");\n        i0.ɵɵtext(28, \"Phone:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_29_listener($event) {\n          return ctx.contact.phone = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\")(31, \"label\");\n        i0.ɵɵtext(32, \"Birth Date:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function ContactDetailComponent_Template_input_ngModelChange_33_listener($event) {\n          return ctx.contact.birthDate = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(34, \"button\", 10);\n        i0.ɵɵtext(35, \"Save\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.firstName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.lastName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.email);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.password);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.category);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.contactCategories);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.subcategory);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.phone);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.birthDate);\n      }\n    },\n    dependencies: [i3.NgForOf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","i_r2","ɵɵadvance","ɵɵtextInterpolate","category_r1","ContactDetailComponent","constructor","route","contactService","router","contact","contactCategories","ngOnInit","idParam","snapshot","paramMap","get","id","getContact","subscribe","data","birthDate","split","error","console","save","updateContact","navigate","_","ɵɵdirectiveInject","i1","ActivatedRoute","i2","ContactService","Router","_2","selectors","decls","vars","consts","template","ContactDetailComponent_Template","rf","ctx","ɵɵlistener","ContactDetailComponent_Template_form_ngSubmit_0_listener","ContactDetailComponent_Template_input_ngModelChange_4_listener","$event","firstName","ContactDetailComponent_Template_input_ngModelChange_8_listener","lastName","ContactDetailComponent_Template_input_ngModelChange_12_listener","email","ContactDetailComponent_Template_input_ngModelChange_16_listener","password","ContactDetailComponent_Template_select_ngModelChange_20_listener","category","ɵɵtemplate","ContactDetailComponent_option_21_Template","ContactDetailComponent_Template_input_ngModelChange_25_listener","subcategory","ContactDetailComponent_Template_input_ngModelChange_29_listener","phone","ContactDetailComponent_Template_input_ngModelChange_33_listener"],"sources":["C:\\Users\\dudmi\\source\\repos\\FrontContactApp\\src\\app\\contact-detail\\contact-detail.component.ts","C:\\Users\\dudmi\\source\\repos\\FrontContactApp\\src\\app\\contact-detail\\contact-detail.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ContactService } from '../contact.service';\r\n\r\n@Component({\r\n  selector: 'app-contact-detail',\r\n  templateUrl: './contact-detail.component.html',\r\n  styleUrls: ['./contact-detail.component.css']\r\n})\r\nexport class ContactDetailComponent implements OnInit {\r\n\r\n  contact: any = {};\r\n  contactCategories: string[] = ['Business', 'Personal', 'Other'];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private contactService: ContactService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const idParam = this.route.snapshot.paramMap.get('id');\r\n    if (idParam !== null) {\r\n      const id = +idParam;\r\n      this.contactService.getContact(id).subscribe(\r\n        data => {\r\n          data.birthDate = data.birthDate.split('T')[0];\r\n          this.contact = data;\r\n        },\r\n        error => console.error('Failed to fetch contact details', error)\r\n      );\r\n    } else {\r\n      console.error('ID parameter is null');\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.contactService.updateContact(this.contact.id, this.contact).subscribe(\r\n      () => this.router.navigate(['/contacts']),\r\n      error => console.error('Failed to update contact', error)\r\n    );\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\">\r\n  <div>\r\n    <label>First Name:</label>\r\n    <input [(ngModel)]=\"contact.firstName\" name=\"firstName\" required />\r\n  </div>\r\n  <div>\r\n    <label>Last Name:</label>\r\n    <input [(ngModel)]=\"contact.lastName\" name=\"lastName\" required />\r\n  </div>\r\n  <div>\r\n    <label>Email:</label>\r\n    <input [(ngModel)]=\"contact.email\" name=\"email\" type=\"email\" required />\r\n  </div>\r\n  <div>\r\n    <label>Password:</label>\r\n    <input [(ngModel)]=\"contact.password\" name=\"password\" type=\"password\" required />\r\n  </div>\r\n  <div>\r\n    <label>Category:</label>\r\n    <select [(ngModel)]=\"contact.category\" name=\"category\">\r\n      <option *ngFor=\"let category of contactCategories; let i = index\" [value]=\"i\">{{ category }}</option>\r\n  </select>\r\n  </div>\r\n  <div>\r\n    <label>Subcategory:</label>\r\n    <input [(ngModel)]=\"contact.subcategory\" name=\"subcategory\" required />\r\n  </div>\r\n  <div>\r\n    <label>Phone:</label>\r\n    <input [(ngModel)]=\"contact.phone\" name=\"phone\" required />\r\n  </div>\r\n  <div>\r\n    <label>Birth Date:</label>\r\n    <input [(ngModel)]=\"contact.birthDate\" name=\"birthDate\" type=\"date\" required />\r\n  </div>\r\n  <button type=\"submit\">Save</button>\r\n</form>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}